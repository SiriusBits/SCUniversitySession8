----item----
version: 1
id: {22C47B26-223F-4D5A-B760-9BB3C711AF9E}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Platform/Functions/Compress-Archive
parent: {E22D066A-04D0-4799-9DAD-EDD9EB07C2B2}
name: Compress-Archive
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 9821

<#
    .SYNOPSIS
        Creates a new archive, or zipped file, from specified files and folders.
        
    .DESCRIPTION
        The Compress-Archive command creates a new zipped (or compressed) archive file from one or more specified files or folders. An archive file allows multiple files to be packaged, and optionally compressed, into a single zipped file for easier distribution and storage. An archive file can be compressed by using the compression algorithm specified by the CompressionLevel parameter.
        
    .PARAMETER CompressionLevel
        Specifies how much compression to apply when you are creating the archive file. Faster compression requires less time to create the file, but can result in larger file sizes. 
        The default value is Optimal. If this parameter is not specified, the command uses the default value, Optimal.
        
        The following are valid values for this parameter.
        - Fastest : Use the fastest compression method available to decrease processing time; this can result in larger file sizes.
        - NoCompression : Do not compress the source files.
        - Optimal : Processing time is dependent on file size.
        
    .PARAMETER DestinationPath
        Specifies the path to the archive output file. This parameter is required. The specified DestinationPath value should include the desired name of the output zipped file; it specifies either the absolute or relative path to the zipped file. 
        If the file name specified in DestinationPath does not have a .zip file name extension, the cmdlet adds a .zip file name extension.
        
    .PARAMETER LiteralPath
        Specifies the path or paths to the files that you want to add to the archive zipped file. To specify multiple paths, and include files in multiple locations in your output zipped file, use commas to separate the paths.
        
    .PARAMETER Path
        Specifies the path or paths to the files that you want to add to the archive zipped file.
    
    .PARAMETER Update
        Updates an existing archive with the added files.
        
    .EXAMPLE
        The following compresses the specified images.
        PS C:\> Compress-Archive -LiteralPath "C:\image.png","C:\image2.png" –CompressionLevel Optimal -DestinationPath "C:\images.zip"

    .EXAMPLE
        The following compresses an entire directory maintaining the folder structure.
        
        PS C:\> Compress-Archive -Path "C:\Images" –CompressionLevel Fastest -DestinationPath "C:\temp\bunchofimages"

    .EXAMPLE
        The following adds files to the compressed archive as a flat structure. The default name is archive.zip.
        
        PS C:\> Get-ChildItem -Path "C:\Images" | Compress-Archive
    
    .INPUT
        You can pipe a string that contains a path to one or more files.
        
        - System.String
        
    .OUTPUT
        The output type is the type of the objects that the command emits.
        
        - System.IO.FileInfo
        
    .NOTES
        Michael West
    
    .NOTES
        Broke compatibility due to Windows PowerShell 5.0 and its inclusion of the same command.
        
    .LINK
        https://technet.microsoft.com/en-us/library/dn841358.aspx
#>
function New-EntryFromFile {
    #($Archive, $file.FullName, $File.Name, $CompressionLevel)
    [CmdletBinding()]
    param(
        [ValidateNotNullOrEmpty()]
        [System.IO.Compression.ZipArchive]$Archive,
        
        [ValidateNotNullOrEmpty()]
        [string]$FileName,
        
        [ValidateNotNullOrEmpty()]
        [string]$EntryName,

        [System.IO.Compression.CompressionLevel]$CompressionLevel = [System.IO.Compression.CompressionLevel]::Optimal
    )
    
    $sourceStream = [System.IO.File]::Open($FileName, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite)
    $entry = $Archive.CreateEntry($entryName, $CompressionLevel)
    $dateTime = [System.IO.File]::GetLastWriteTime($FileName)
    if($dateTime.Year -lt 1980 -or $dateTime.Year -gt 2107) {
        $dateTime = [datetime]"01/01/1980"
    }
    $entry.LastWriteTime = [System.DateTimeOffset]$dateTime
    
    $destinationStream = $entry.Open()
    $sourceStream.CopyTo($destinationStream)
    $destinationStream.Dispose()
    $sourceStream.Dispose()
    
    $entry
}

function Compress-Archive {
    [CmdletBinding(DefaultParameterSetName="Path")]
    param(
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, ParameterSetName="Path")]
        [ValidateNotNullOrEmpty()]
        [string[]]$Path,
        
        [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$false, ValueFromPipelineByPropertyName=$true, ParameterSetName="LiteralPath")]
        [Alias("PSPath")]
        [ValidateNotNullOrEmpty()]
        [string[]]$LiteralPath,

        [Parameter(Mandatory=$false, Position=1)]
        [ValidateNotNullOrEmpty()]
        [string]$DestinationPath=("$($SitecoreDataFolder)\archived\"),
        
        [System.IO.Compression.CompressionLevel]$CompressionLevel = [System.IO.Compression.CompressionLevel]::Optimal,
        
        [switch]$Update,
        
        [ValidateNotNullOrEmpty()]
        [string[]]$Include = "*"
    )

    begin {
        Add-Type -AssemblyName System.IO.Compression
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        
        $mode = [System.IO.Compression.ZipArchiveMode]::Create
        if($Update) {
            $mode = [System.IO.Compression.ZipArchiveMode]::Update
        }
        
        $name = [System.IO.Path]::GetFileName($DestinationPath)
        if(!$name) {
            Write-Verbose "Using the default filename archive.zip."
            $name = "archive.zip"
        }        
        if($name -notmatch "zip$") {
            Write-Verbose "Adding the extension .zip to the filename."
            $name += ".zip"
        }
        
        $directory = [System.IO.Path]::GetDirectoryName($DestinationPath)
        
        if(!(Test-Path -Path $directory)) {
            Write-Verbose "Creating a new directory at the specified path $($directory)"
            New-Item -Path $directory -ItemType directory | Out-Null
        }
        
        $zipPath = (Join-Path -Path $directory -ChildPath $name)
        if(!$Update -and (Test-Path -Path $zipPath)) {
            Write-Verbose "Removing the the existing archive at the path $($zipPath)."
            Remove-Item -Path $zipPath
        }
        
        Write-Verbose "Opening the archive at the path $($zipPath) with mode $($mode)."
        $zipArchive = [System.IO.Compression.ZipFile]::Open($zipPath, $mode)
        
        function Add-FileEntry {
            [CmdletBinding()]
            param(
                [System.IO.Compression.ZipArchive]$Archive,
                [string]$Path
            )
            Write-Verbose $Path
            $file = New-Object System.IO.FileInfo (Resolve-Path -Path $Path).ProviderPath
            Write-Verbose "Adding the file $($file.Name) to the archive."
            New-EntryFromFile -Archive $Archive -FileName $file.FullName -EntryName $file.Name -CompressionLevel $CompressionLevel | Out-Null
        }
        
        function Add-DirectoryEntry {
            [CmdletBinding()]
            param(
                [System.IO.Compression.ZipArchive]$Archive,
                [string]$Path
            )
            
            $directory = New-Object System.IO.DirectoryInfo (Resolve-Path -Path $Path).ProviderPath
            Write-Verbose "Adding the directory $($directory.FullName) to the archive."
            $zipArchive.CreateEntry($directory.Name + '\') | Out-Null
            $items = Get-ChildItem -Path $directory -Recurse -Include $Include
            $dir = [Uri]($directory.Parent.FullName + '\')
            foreach($item in $items) {
                $subdir = [Uri]($item.FullName + (@{$true="\";$false=""}[$item.PSIsContainer]))
                $p = [Uri]::UnescapeDataString($dir.MakeRelativeUri($subdir).ToString().Replace('/',[System.IO.Path]::DirectorySeparatorChar).TrimStart("..\"))
                if($item.PSIsContainer) {
                    $zipArchive.CreateEntry($p) | Out-Null
                } else {
                    if($Update -and $zipArchive.GetEntry($p)) {
                        Write-Verbose "Skipping the file $($item.FullName) because it already exists."
                        continue
                    }
                    
                    Write-Verbose "Adding the file $($item.FullName) to the archive."
                    New-EntryFromFile -Archive $zipArchive -FileName $item.FullName -EntryName $p -CompressionLevel $CompressionLevel | Out-Null
                }
            }    
        }
    }
    
    process {
        if($LiteralPath) {
            foreach($literal in $LiteralPath) {
                if(Test-Path -Path $literal -PathType Leaf) {
                    Add-FileEntry -Path $literal -Archive $zipArchive
                }
            }
        } elseif($Path) {
            foreach($p in $Path) {
                if(Test-Path -Path $p) {
                    if(Test-Path -Path $p -PathType Leaf) {
                        Add-FileEntry -Path $p -Archive $zipArchive
                    } else {
                        Add-DirectoryEntry -Path $p -Archive $zipArchive
                    }
                }
            }
        }
    }
    
    end {
        Write-Verbose "Completed adding entries to the archive."
        $zipArchive.Dispose()
        
        New-Object System.IO.FileInfo $zipPath
    }
}
----version----
language: en
version: 1
revision: 3fb38a9e-a07f-4b9f-9ad0-086ff3a5e44f

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20140429T020908
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

3fb38a9e-a07f-4b9f-9ad0-086ff3a5e44f
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 34

20150820T040427:635756402677598295
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
