----item----
version: 1
id: {2A56E54D-C1AA-4900-B99A-BF4249B4B896}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Getting Started/User Interaction/Read-Variable - Sample with input validation
parent: {97909803-E651-41E4-A13A-BA1A831685B3}
name: Read-Variable - Sample with input validation
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 2389

<#
    .SYNOPSIS
        Prompts user for 3 values and validates them in 3 different ways, then outputs them to the Host.

	.DESCRIPTION
        Example scripts that prompts user for 3 values and validates them in 3 different ways, then outputs them to the Host.

        $userName uses simplest "Mandatory" validator that only checks that string is not empty - this validator works only on some fields.
        $password is validated in the global validator at the end of the command.
        $description is validated by a local parameter "Validator" script block that only checks a single entry        
    
    .NOTES
        Adam Najmanowicz - https://gist.github.com/AdamNaj/37ad58e1a9350604e4815ca586acf39e
#>

$result = Read-Variable -Parameters `
    @{ Name = "userName"; Value=""; Title="UserName"; Placeholder="User name goes here"; Mandatory=$true},
    @{ Name = "password"; Value=""; Title="Password"; Editor="password"; Placeholder="Password goes here"},
    @{ Name = "description"; Value=""; Title="Description"; Lines=3; Placeholder="User description"; Validator={ 
        if([string]::IsNullOrEmpty($variable.Value)){
            $variable.Error = "Please provide a description."
        }}} `
    -Description "This Dialog shows how to provide a validator for values" `
    -Title "Password entry" -Width 450 -Height 410 -OkButtonName "Proceed" -CancelButtonName "Abort" -ShowHints `
    -Validator { 
        $minPassLength = 6
        $pass = $variables.password.Value;
        if($pass.Length -ge $minPassLength)
        {
        	$valErr = @()
    		if (-not ($pass -match "[^a-zA-Z0-9]")) #check for special chars
    	    {
    	        $valErr += "special character"
    	    }
    		if (-not ($pass -match "[0-9]"))
    		{ 
    	        $valErr += "number"
    		}
    		if (-not ($pass -cmatch "[a-z]"))
    		{ 
    	        $valErr += "lowercase character"
    		}
    		if (-not ($pass -cmatch "[A-Z]"))
    		{ 
    	        $valErr += "uppercase character"
    		}
    		if($valErr.Count -gt 0){
    		    $variables.password.Error = "Password must have at least one: " + ( $valErr -Join ", ")
    		}
        }
        else
        {
            $variables.password.Error = "Password must be at least " + $minPassLength + " characters long"
        }
    }

$userName
$password
$description

----version----
language: en
version: 1
revision: 559005b6-5f25-4432-be40-979aa02e6ab0

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20161021T123001
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

559005b6-5f25-4432-be40-979aa02e6ab0
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 15

20161021T143900
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
