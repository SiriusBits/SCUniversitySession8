----item----
version: 1
id: {44178C08-FBA0-44F5-BAC8-B73506693F4E}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Task Management/Functions/Edit-TaskSchedule
parent: {33DD6099-7AA8-48B2-9183-C5A54D3A4F8C}
name: Edit-TaskSchedule
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 4639

function Parse-TaskSchedule {
	[CmdletBinding()]
	param(
	    [ValidateNotNullOrEmpty()]
	    [item]$scheduleItem,

	    [ValidateNotNullOrEmpty()]
	    [string]$column
	)
	
	$ScSchedule = $scheduleItem.Schedule.Split('|');
	switch ($column) {
		from { [Sitecore.DateUtil]::IsoDateToDateTime($ScSchedule[0]); break; }
		to {
			$fieldValue = $ScSchedule[1];
			if ([string]::IsNullOrEmpty($fieldValue)) {
				[datetime]::MaxValue;
			}
			else {
				[Sitecore.DateUtil]::IsoDateToDateTime($fieldValue);
			}
			break;
		}
		weekdays {
			$weekDays = @( 1,2,4,8,16,32,64);
			[int]$scDays = $ScSchedule[2]
			$weekDays | Where-Object { $_ -band $scDays }
			break;
		}
		strWeekdays {
			$weekDays = @{ 1 = "Sunday"; 2 = "Monday"; 4 = "Tuesday"; 8 = "Wednesday"; 16 = "Thursday"; 32 = "Friday"; 64 = "Saturday" }
			[int]$days = $ScSchedule[2]
			$weekDays.Keys | Where-Object { $_ -band $days } | Sort-Object | ForEach-Object { $daysStr += "$($weekDays.Get_Item($_)), " }
			if ($daysStr -ne $null) {
				$daysStr = $daysStr.Trim(',',' ');
			}
			$daysStr
			break;
		}
		interval { 
		    if ($ScSchedule[3] -eq $null) {
				""
			} else {
				$ScSchedule[3]
			}
			break;
		}
	}
}

function Format-TaskSchedule {
	[CmdletBinding()]
	param(
		[ValidateNotNullOrEmpty()]
		[datetime]$from,
		
		[ValidateNotNullOrEmpty()]
		[datetime]$to,
		
		[ValidateNotNull()]
		$days,
		
		[ValidateNotNullOrEmpty()]
		[string]$interval
	)

	if (($from -eq [datetime]0) -or ($from -eq [datetime]::MaxValue) -or ($from -eq [datetime]::MinValue)) {
		$fromStr = ""
	} else {
		$fromStr = $([Sitecore.DateUtil]::ToIsoDate($from))
	}

	if (($from -eq [datetime]0) -or ($from -eq [datetime]::MaxValue) -or ($from -eq [datetime]::MinValue)) {
		$toStr = ""
	} else {
		$toStr = $([Sitecore.DateUtil]::ToIsoDate($to))
	}
	[int]$scDays = ($days | Measure-Object -Sum).Sum;
	
	"$fromStr|$toStr|$scDays|$interval"
}

function Edit-TaskSchedule {
	[CmdletBinding()]

	param(
		[ValidateNotNullOrEmpty()]
		[item]$Item
	)

	$weekDayOptions = [ordered]@{
	    "Sunday" = 1
	    "Monday" = 2
	    "Tuesday" = 4
	    "Wednesday" = 8
	    "Thursday" = 16
	    "Friday" = 32
	    "Saturday" = 64
	}

	$from = Parse-TaskSchedule $Item "from"
	$to = Parse-TaskSchedule $Item "to"
	$weekdays = Parse-TaskSchedule $Item "weekdays"
	$interval = Parse-TaskSchedule $Item "interval"
	$tsInterval = [timespan]::Zero
	[timespan]::TryParse($interval,[ref]$tsInterval) | Out-Null
	$intDays = $tsInterval.Days
	$intHours = $tsInterval.Hours
	$intMinutes = $tsInterval.Minutes
	$intSeconds = $tsInterval.Seconds
	$intMilis = $tsInterval.Milliseconds

	$result = Read-Variable -Parameters `
 		@{ Name = "from"; Title = "Starts running at"; Editor = "date time"; Tip = "Date the task should start for the first time."; Columns = 6 },
	    @{ Name = "to"; Title = "Stops running at"; Editor = "date time"; Tip = "Date the task should end being run."; Columns = 6 },
	    @{ Name = "weekdays"; Title = "Days to run"; Options = $weekDayOptions; Editor = "checklist"; Tip = "Select the days of the week the task should run." },
	    @{ Name = "intervalInfo"; Title = "Interval"; Tip = "Specify how often the task should be launched"; Editor = "info" },
	    @{ Name = "intDays"; Title = "Days"; Columns = 2 },
	    @{ Name = "intHours"; Title = "Hours"; Columns = 2 },
	    @{ Name = "intMinutes"; Title = "Minutes"; Columns = 2 },
	    @{ Name = "intSeconds"; Title = "Seconds"; Columns = 2 },
	    @{ Name = "intMilis"; Title = "Milliseconds"; Columns = 2 } `
 		-Description "Specify schedule for task '$($Item.DisplayName)'. You can edit the date/time task becomes active and when it should stop running, what days it will run on and how often." `
 		-Title "Schedule for task: $($Item.DisplayName)" -Width 600 -Height 570 -OkButtonName "Change" -CancelButtonName "Cancel" -ShowHints

	$tsInterval = [timespan]"$($intDays).$($intHours):$($intMinutes):$($intSeconds).$($intMilis)"
	$interval = $tsInterval.ToString();

	if ($result -eq "ok") {
		$Item.Schedule = Format-TaskSchedule $from $to $weekdays $interval
	}
}

function Format-TaskScheduleDate {
	param(
		[datetime]$Date,
		[string]$Text
	)

	if (($Date -le [datetime]::MinValue -or $Date -ge [datetime]::MaxValue) -and $Text) {
		$Text
	} else {
		$Date
	}
}

function Format-TaskScheduleDay {
	param(
		[string]$Days,
		[string]$Text
	)

	$everyDay = [enum]::GetNames("dayofweek") -join ", "
	if ($Days -eq $everyDay -and $Text) {
		$Text
	} else {
		$Days
	}
} 
----version----
language: en
version: 1
revision: f6c27345-e0d3-4152-bc97-d92023176c22

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20140520T050534
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

f6c27345-e0d3-4152-bc97-d92023176c22
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 34

20150809T154442:635747318824565702
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
