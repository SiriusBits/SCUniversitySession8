----item----
version: 1
id: {0F51A4A9-9BF9-4EF4-8B54-2ED954C6931D}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Platform/Development/PowerShell Extensions Maintenance/Serialize Changes
parent: {01BB164C-5E8E-4C9B-941F-E5340BDD520C}
name: Serialize Changes
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 8101

$monitoredDateFields = "__Created","__Updated","__Valid from","__Valid to","__Publish","__Unpublish","__Archive date","__Reminder date","__Archive Version date"
$dryRun = $false;
$officeIcons = @{};
$updateItems = $false;
$showIcons = $false;

function ConvertTo-LegacyDate {
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true,Position = 0,ValueFromPipeline = $true)]
		[ValidateNotNullOrEmpty()]
		[item]$Item,
		[switch]$Recurse
	)

	process {
		$needsFixing = $false

		#Cleanup languages other than EN
		#Get-Item $item.Providerpath -Language * | ? { $_.Language.Name -ne "en"  } | ft Providerpath, Language #| % { Remove-ItemLanguage -Path $_.ProviderPath -Language $_.Language.Name } 

		foreach ($field in $monitoredDateFields) {
			if ($item.Fields[$field].HasValue -and $item.Fields[$field].Value.EndsWith("Z"))
			{
				$needsFixing = $true;
				break;
			}
		}
		if ($needsFixing) {
			$item.Editing.BeginEdit();
			foreach ($field in $monitoredDateFields) {
				if ($item.Fields[$field].HasValue -and $item.Fields[$field].Value.EndsWith("Z"))
				{
					Write-Host "$($item.ProviderPath), Fixing $field, $($item.Fields[$field].Value) " -f Green
					$item.Fields[$field].Value = $item.Fields[$field].Value.TrimEnd('Z');
				}
			}
			$item.Editing.EndEdit($false,$false) | Out-Null
		}
		if ((-not $dryRun) -and $item.Fields["__Final Renderings"].HasValue) {
			$item.Editing.BeginEdit();
			$item.Fields["__Final Renderings"].Reset()
			$item.Editing.EndEdit($false,$false);
		}
		if ($item.ProviderPath.StartsWith("core:") -and ($item.__Icon -match "Office/")) {
			$officeIcons[$item.ProviderPath] = $item.__Icon;
		}
		if ($item.ProviderPath.StartsWith("core:") -and ($item.Icon -match "Office/")) {
			$officeIcons[$item.ProviderPath] = $item.Icon;
		}

		if ($item.ProviderPath.StartsWith("core:") -and ($item.Icon -match "Apps/")) {
			$officeIcons[$item.ProviderPath] = $item.Icon;
		}

		if ($Recurse) {
			#Write-Host "$($item.ProviderPath), Going deep" -f Cyan
			Get-ChildItem $item.ProviderPath -Recurse | ConvertTo-LegacyDate -Recurse
		}
	}
}

function Process-Item {
	[CmdletBinding()]
	param(
		[Parameter(Mandatory = $true,ValueFromPipeline = $true)]
		[ValidateNotNullOrEmpty()]
		[item]$Item,

		[Parameter()]
		[string]$Activity,

		[Parameter()]
		[int]$PercentComplete,

		[Parameter()]
		[switch]$Recurse
	)

	process {

		if ($PercentComplete -ne 0) {

			$TheActivity = @{ $true = 'Deserializing '; $false = 'Serializing ' }[$updateItems] + "$Activity"
			#Write-Host "$TheActivity $PercentComplete%" -Fo Yellow
			Write-Progress -Activity $TheActivity -PercentComplete $PercentComplete
		}
		#Write-Host "$($item.ProviderPath), $Recurse"
		ConvertTo-LegacyDate -Item $Item -Recurse:$Recurse

		if (-not $dryRun) {
			if ($updateItems) {
				Import-Item $Item -Recurse:$Recurse -ForceUpdate
			} else {
				Export-Item $Item -Recurse:$Recurse
			}
		}

	}
}


if (-not $dryRun -and -not $updateItems) {
	Write-Progress -Activity "Deleting old serialized item"
	Get-ChildItem "$SitecoreSerializationFolder" | Remove-Item -Recurse
}

#Item templates
Get-Item 'master:\templates\Modules' | Process-Item -Activity "Item templates " -PercentComplete 5
Get-Item 'master:\templates\Modules\PowerShell Console' | Process-Item -Activity "Item templates" -PercentComplete 15 -Recurse
Get-Item 'master:\templates\Modules\PowerShell Authorable Reports' | Process-Item -Activity "Item templates" -PercentComplete 15 -Recurse

# Module Root
Get-Item 'master:\system\Modules\PowerShell' | Process-Item -Activity "Module Root" -PercentComplete 35

# Colors
Get-Item 'master:\system\Modules\PowerShell\Console Colors' | Process-Item -Activity "Console Colors" -PercentComplete 40 -Recurse

# Fonts
Get-Item 'master:\system\Modules\PowerShell\Fonts' | Process-Item -Recurse -Activity "Console Fonts" -PercentComplete 43

# Rules Engine Rules
Get-Item "master:\system\Settings\Rules\Definitions\Tags\PowerShell" | Process-Item -Recurse -Activity "Rules Engine Rules" -PercentComplete 45
Get-Item "master:\system\Settings\Rules\Definitions\Tags\PowerShell Experience Buttons" | Process-Item -Recurse -Activity "Rules Engine Rules" -PercentComplete 46
Get-Item "master:\system\Settings\Rules\Definitions\Tags\PowerShell ISE" | Process-Item -Recurse -Activity "Rules Engine Rules" -PercentComplete 47
Get-Item "master:\system\Settings\Rules\Definitions\Elements\PowerShell" | Process-Item -Recurse -Activity "Rules Engine Rules" -PercentComplete 48
Get-Item "master:\system\Settings\Rules\Definitions\Elements\PowerShell Experience Buttons" | Process-Item -Recurse -Activity "Rules Engine Rules" -PercentComplete 49
Get-Item "master:\system\Settings\Rules\Definitions\Elements\PowerShell ISE" | Process-Item -Recurse -Activity "Rules Engine Rules" -PercentComplete 50
Get-Item "master:\system\Settings\Rules\PowerShell" | Process-Item -Recurse -Activity "Rules Engine Rules" -PercentComplete 51

# Script Library
Get-Item 'master:\system\Modules\PowerShell\Script Library' | Process-Item -Activity "Script Library" -PercentComplete 55
$libraries = Get-ChildItem 'master:\system\Modules\PowerShell\Script Library' | ? { -not $_.Name.StartsWith("__") } 
$i = 0;
$libraries | % { $i++; Process-Item -Item $_ -Recurse -Activity "Script Library: $($_.Name)" -PercentComplete (55 + 25 / $libraries.Count * $i) }

# Settings
Get-Item master:\system\Modules\PowerShell\Settings | Process-Item -Activity "Settings" -PercentComplete 80
Get-ChildItem master:\system\Modules\PowerShell\Settings | Process-Item
Get-Item "master:\system\Modules\PowerShell\Settings\*\All Users" | Process-Item

# PowerShell Applications
Get-Item core:\content\Applications\PowerShell | Process-Item -Recurse -Activity "PowerShell Applications" -PercentComplete 82

# PowerShell Dictionary - translation strings
Get-Item core:\system\Dictionary\PowerShell | Process-Item -Recurse -Activity "PowerShell Applications" -PercentComplete 85

# PowerShell Application Layouts
Get-Item 'core:\layout\Layouts\Applications\PowerShell*' | Process-Item -Recurse -Activity "PowerShell Application Layouts" -PercentComplete 87
Get-Item 'master:\layout\Layouts\PowerShell' | Process-Item -Recurse

# Start Menu icons
Get-Item 'core:\content\Documents and settings\All users\Start menu\Right\Development Tools\PowerShell ISE' | Process-Item -Activity "Start Menu icons" -PercentComplete 90
Get-Item 'core:\content\Documents and settings\All users\Start menu\Right\PowerShell Console' | Process-Item
Get-Item 'core:\content\Documents and settings\All users\Start menu\Right\PowerShell Toolbox' | Process-Item
Get-Item 'core:\content\Documents and settings\All users\Start menu\Right\Reporting Tools\PowerShell Reports' | Process-Item
Get-ChildItem 'core:\content\Documents and settings\All users\Start menu\Right\Reporting Tools\PowerShell Reports' | Process-Item

# Content Editor Context Menu integration
Get-Item 'core:\content\Applications\Content Editor\Context Menues\Default\Edit Script' | Process-Item -Activity "Content Editor Context Menu integration" -PercentComplete 92
Get-Item 'core:\content\Applications\Content Editor\Context Menues\Default\PowerShell Console' | Process-Item
Get-Item 'core:\content\Applications\Content Editor\Context Menues\Default\Context PowerShell Scripts' | Process-Item

# LaunchPad
Get-Item 'core:\client\Applications\Launchpad\PageSettings\Buttons\ContentEditing\PowerShell ISE' | Process-Item -Activity "Launchpad Integration" -PercentComplete 95

# Tasks integration
Get-Item 'master:\system\Tasks\Commands\PowerShellScriptCommand' | Process-Item -Activity "Content Tasks integration" -PercentComplete 97

$null = Get-Role -Identity 'sitecore\PowerShell Extensions Remoting' | Export-Role

if ($showIcons) {
	if ($officeIcons.Keys.Count -gt 0) {
		Write-Host "`$icons = @{"
		foreach ($path in ($officeIcons.Keys | sort)) {
			Write-Host "'$path' = '$($officeIcons[$path])';"
		}
		Write-Host "}"
	}
}

----version----
language: en
version: 1
revision: 5d50234e-4130-4da1-978c-cabbec674821

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20130819T132011
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

5d50234e-4130-4da1-978c-cabbec674821
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 15

20161016T205729
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
