----item----
version: 1
id: {23F746EC-809E-4D33-9055-F33CBA1225CA}
database: master
path: /sitecore/system/Modules/PowerShell/Script Library/Platform/Functions/Remoting
parent: {E22D066A-04D0-4799-9DAD-EDD9EB07C2B2}
name: Remoting
master: {00000000-0000-0000-0000-000000000000}
template: {DD22F1B3-BD87-4DB2-9E7D-F7A496888D43}
templatekey: PowerShell Script

----field----
field: {B1A94FF0-6897-47C0-9C51-AA6ACB80B1F0}
name: Script
key: script
content-length: 5263

<# 
  Sitecore PowerShell Remoting.

  Sample Execute Script Block on a Sitecore Server:
    Set-SitecoreConfiguration 'http://hostname' 'admin' 'b'
    Invoke-SitecoreScript { get-item master:\content\ } @{name = "value"}

  Sample upload local C:\image.png to a Sitecore Server to "/sitecore/media library/Path/an_image.png" path:
    Set-SitecoreConfiguration 'http://hostname' 'admin' 'b'
    Get-Item C:\image.png | Upload-SitecoreFile -remotePath "Path\an_image.png"
    
  Sample upload remote "/sitecore/ media library/Path/an_image.png" from local C:\image.png:
    Set-SitecoreConfiguration 'http://hostname' 'admin' 'b'
    Upload-SitecoreFile -remotePath "Path\an_image" -File C:\image.jpg

Naturally update the host name, credentials and parameters with the ones meeting your use case.
    
#>

function Set-SitecoreConfiguration {
    [CmdletBinding()]
    param(
        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$SitecoreHost,

        [Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$User,
        
        [Parameter(Position=2, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$Password
    )
    $URI = $SitecoreHost + "/sitecore%20modules/PowerShell/Services/RemoteAutomation.asmx";
    $GLOBAL:SpeRemoteProxy = New-WebServiceProxy -Uri $URI
    $GLOBAL:SpeRemoteUser = $User;
    $GLOBAL:SpeRemotePassword = $Password;
}

function Invoke-SitecoreScript {
    [CmdletBinding()]
    param(
        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [ScriptBlock]$Command,
        
        [Parameter(Position=1, ValueFromPipeline=$true)]
        [Hashtable]$Params = @{noParameters=$true}
    )
	
    $sb = New-Object System.Text.StringBuilder;
    $settings = New-Object System.Xml.XmlWriterSettings -Property @{CloseOutput = $true; Encoding = [System.Text.Encoding]::UTF8; Indent = $false; OmitXmlDeclaration = $true};
    $xw = [System.Xml.XmlWriter]::Create($sb, $settings);
    $type = $type = [PSObject].Assembly.GetType("System.Management.Automation.Serializer");
    $ctor = $type.GetConstructor("instance,nonpublic", $null, @([Xml.XmlWriter]), $null);
    $serializer = $ctor.invoke($xw);
    $method = $type.GetMethod("Serialize", "invokemethod,nonpublic,instance", $null, @([object]), @());
    $done = $type.GetMethod("Done", [System.Reflection.BindingFlags]"nonpublic,instance");
    $method.Invoke($serializer, @($Params)) | Out-Null;
    $done.Invoke($serializer, @()) | Out-Null;
    $cliXmlArgs = $sb.ToString();
    $xw.Close();

    $reply = $GLOBAL:SpeRemoteProxy.ExecuteScriptBlock($GLOBAL:SpeRemoteUser, $GLOBAL:SpeRemotePassword, $Command, $cliXmlArgs);

    $xmlString = $reply -replace "\n", "" -replace "\r",""
    $sr = New-Object System.IO.StringReader $xmlString
    $xr = New-Object System.Xml.XmlTextReader $sr
    $type = $type = [PSObject].Assembly.GetType("System.Management.Automation.Deserializer")
    $ctor = $type.GetConstructor("instance,nonpublic", $null, @([Xml.XmlReader]), $null)
    $deserializer = $ctor.Invoke($xr)
    $method = $type.GetMethod("Deserialize", "nonpublic,instance", $null, @(), @())
    $done = $type.GetMethod("Done", [System.Reflection.BindingFlags]"nonpublic,instance")
    while (!$done.Invoke($deserializer, @()))
    {
        try {
            $value = $method.Invoke($deserializer, @())
            return $value
        } catch [Exception] {
            write-warning "Error while de-serializing string: $($error[0])"
            break;
        }
    }
    $xr.Close()
    $sr.Dispose()
}

function Upload-SitecoreFile {
    [CmdletBinding()]
    param(
        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$File,
        
        [Parameter(Position=1)]
		[ValidateNotNullOrEmpty()]
        [String]$RemotePath,

        [Parameter(Position=2)]
        [String]$Database = "master",

        [Parameter(Position=3)]
        [String]$Language = "en"
    )
	
    $bytes = [System.IO.File]::ReadAllBytes($file);
    $reply = $GLOBAL:SpeRemoteProxy.UploadFile($GLOBAL:SpeRemoteUser, $GLOBAL:SpeRemotePassword, $RemotePath, $bytes, $Database, $Language);
}

function Download-SitecoreFile {
    [CmdletBinding()]
    param(
        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$File,
        
        [Parameter(Position=1)]
		[ValidateNotNullOrEmpty()]
        [String]$RemotePath,

        [Parameter(Position=2)]
        [String]$Database = "master",

        [Parameter(Position=3)]
        [String]$Language = "en"
    )
	
    $bytes = $GLOBAL:SpeRemoteProxy.DownloadFile($GLOBAL:SpeRemoteUser, $GLOBAL:SpeRemotePassword, $RemotePath, $Database, $Language);
    if(-not(test-path $file))
    {
        New-Item -ItemType File -Path $File
    }

    $FileName = Convert-Path -path $File
    [System.IO.File]::WriteAllBytes($FileName, $bytes);
}
----version----
language: en
version: 1
revision: b255de1b-eeb4-4efb-b807-55592277b410

----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20131117T204733
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

b255de1b-eeb4-4efb-b807-55592277b410
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 15

20151024T124418
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
